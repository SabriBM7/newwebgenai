// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  websites      Website[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Website {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections    Section[]
  settings    WebsiteSettings?
}

model Section {
  id        String   @id @default(cuid())
  type      String   // e.g., "header", "hero", "features"
  order     Int
  content   Json     // Stores the section content as JSON
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteSettings {
  id            String   @id @default(cuid())
  colorScheme   Json     // Stores color scheme as JSON
  typography    Json     // Stores typography settings as JSON
  customDomain  String?
  analytics     Json?    // Stores analytics settings as JSON
  websiteId     String   @unique
  website       Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GenerationHistory {
  id        String   @id @default(cuid())
  prompt    Json     // Stores the generation prompt
  result    Json     // Stores the generation result
  userId    String
  websiteId String?
  createdAt DateTime @default(now())
}
